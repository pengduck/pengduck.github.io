<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://pengduck.github.io/</id><title>펭덕의 주저리x2</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-08-28T21:27:42+09:00</updated> <author> <name>dw.kim</name> <uri>https://pengduck.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://pengduck.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://pengduck.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 dw.kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>정규표현식 삽질 - asterisk(*) vs plus(+)</title><link href="https://pengduck.github.io/posts/regex_asterisk/" rel="alternate" type="text/html" title="정규표현식 삽질 - asterisk(*) vs plus(+)" /><published>2023-08-27T21:40:00+09:00</published> <updated>2023-08-27T21:40:00+09:00</updated> <id>https://pengduck.github.io/posts/regex_asterisk/</id> <content src="https://pengduck.github.io/posts/regex_asterisk/" /> <author> <name>dw.kim</name> </author> <category term="Dev" /> <category term="Tips" /> <summary> 오랜만의 포스팅. 정신없는 와중에.. 이 글은 나중에 혹시나 어리둥절할 일을 방지하기 위한 메모이다. 잘 써오던 로직 DB에 정규표현식을 저장하여, 데이터를 수집 후 해당 표현식에 맞는 데이터를 분류해주는 로직이 있었다. 예를 들어 penguin* 으로 저장된 표현식의 목적은, 데이터의 key가 penguin_emperor, penguin_gentoo 와 같은 경우 분류하기 위한 크게 복잡하지 않은 용도였다. 꽤 오랫동안 아무 트러블이 없었다. 결국 터진 시한폭탄 비록 정규식을 염두에 두고 만들어진 로직이지만, * 이외엔 딱히 쓸일이 없었고, 특정 코드값을 분류하는 과정에서 터졌다. block_a* block_b* … 와 같은 방식으로 표현식을 정의하였는데, block_를 ... </summary> </entry> <entry><title>몽고DB (MongoDB) - value type 변경</title><link href="https://pengduck.github.io/posts/mongodb_change_type/" rel="alternate" type="text/html" title="몽고DB (MongoDB) - value type 변경" /><published>2023-05-13T21:40:00+09:00</published> <updated>2023-05-13T21:40:00+09:00</updated> <id>https://pengduck.github.io/posts/mongodb_change_type/</id> <content src="https://pengduck.github.io/posts/mongodb_change_type/" /> <author> <name>dw.kim</name> </author> <category term="Dev" /> <category term="Tips" /> <summary> 뭐지 이거? 몽고DB를 사용하여 운영하는 중 쿼리를 사용해 데이터를 집어넣는 경우가 있었는데, 이후로 type casting 문제로 앱이 잘 안도는 것이었다. 황급히 find 쿼리로 보면 그냥 숫자값인데 왜? 앱에서는 double로 인식하고 있었다. logstash로 수집 데이터를 MongoDB로 넣어준 뒤 그걸 꺼내 확인하는 앱인데 logstash로 넣은 데이터와 직접 수작업 쿼리로 넣은 게 타입이 다른가? 라는 의문은 잠시 뒤로하고, 결과가 그러하니 그렇게 이해하는 것으로 넘어가기로 하고 (다음에 알아볼수 있으면 알아봐야지..) 우선은 문제부터 해결해야 할 것이야. 필드 value의 타입 확인하기 우선 몽고 shell로 접속. 자바스크립트처럼 간단히 타입을 확인할 수 있다고 한다. ... </summary> </entry> <entry><title>카프카 클러스터 (Kafka Cluster) - failover</title><link href="https://pengduck.github.io/posts/kafka_failover/" rel="alternate" type="text/html" title="카프카 클러스터 (Kafka Cluster) - failover" /><published>2023-04-26T20:45:00+09:00</published> <updated>2023-05-13T23:12:54+09:00</updated> <id>https://pengduck.github.io/posts/kafka_failover/</id> <content src="https://pengduck.github.io/posts/kafka_failover/" /> <author> <name>dw.kim</name> </author> <category term="Dev" /> <category term="Tips" /> <summary> 뭐야 왜 하나 뻗으니 전부 다 작동안해? 카프카를 클러스터로 구성했으니 마땅히 하나가 뻗으면 나머지가 제 역할을 수행해 줄 것이라 굳게 믿고 있었으나 뒤통수를 맞고 말았다.. 하나가 죽었는데 producing, consuming이 모두 뻗어버리고 만 것이다. 우선은 리더라는 개념이 있는 모양이다. 알아서 분산하는 줄 알고있었더니 아니었다.. Leader와 Follower가 있고, Leader가 죽을 경우 Follower가 Leader의 역할을 수행하지만 이는 ISR(In Sync Replica) 라는 그룹에 묶여 있을 때의 이야기이다. ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --topic test --describe 토픽을 desc... </summary> </entry> <entry><title>보호 (Protection)</title><link href="https://pengduck.github.io/posts/os_protection/" rel="alternate" type="text/html" title="보호 (Protection)" /><published>2023-03-13T20:45:00+09:00</published> <updated>2023-03-13T20:45:00+09:00</updated> <id>https://pengduck.github.io/posts/os_protection/</id> <content src="https://pengduck.github.io/posts/os_protection/" /> <author> <name>dw.kim</name> </author> <category term="CS지식" /> <category term="OS" /> <summary> 공룡책(10판) Chapter 17 요약 보안은 컴퓨터 자원을 보호하는 것에 중점을, 보호는 프로세스와 사용자의 접근을 제어하는데 중점을 맞춘다. 보호의 목표 _ Goals of Protection 컴퓨터 시스템의 응용이 더욱 복잡, 광범위해짐으로, 시스템의 무결성을 보호할 필요성이 증가하였다. 신뢰가 없는 사용자도 이용할 수 있는 공동의 논리적 공간, 물리적 공간을 안전하게 공유하기 위해 고안되었다. 결국 접근 제한을 악의적, 의도적으로 위반하는 것을 방지하기 위해, 자원을 정해진 사용 정책대로 사용하도록 보장하기 위함이다. 기법(mechanism, 어떻게 할지)과 정책(policy, 무엇을 할지)의 구분이 중요하다. 보호의 원칙 _ Principles of Protection 최소한의 ... </summary> </entry> <entry><title>보안 (Security)</title><link href="https://pengduck.github.io/posts/os_security/" rel="alternate" type="text/html" title="보안 (Security)" /><published>2023-03-12T19:50:00+09:00</published> <updated>2023-03-12T19:50:00+09:00</updated> <id>https://pengduck.github.io/posts/os_security/</id> <content src="https://pengduck.github.io/posts/os_security/" /> <author> <name>dw.kim</name> </author> <category term="CS지식" /> <category term="OS" /> <summary> 공룡책(10판) Chapter 16 요약 인프런 강의에 있어 슬슬 마지막 파트..! 보안과 보호이다. 비슷비슷해 보이지만, 보안은 인증(authentication), 보호는 인가(authorization), 권한과 관계된 부분을 다루게 된다. 보안 문제 _ Security Problem 컴퓨터 자원들이 모든 상황에서 의도된 대로 사용되고 접근된다면 안전하다고 할 수 있다. 보안이란, 실수로 혹은 고의로 자원이 잘못 사용되는 것, 혹은 공격을 감지하여 방어하거나 실수를 제어하는 것이다. cryptography(암호 기법)으로 주로 방어를 수행하게 될 것이다. 보안 위배 요소로 다음을 구분한다. 위협(threat) : 취약성 발견과 같은 보안 위반 잠재 가능성, 실수에 의해 발생하는 경우 ... </summary> </entry> </feed>

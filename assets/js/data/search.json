[ { "title": "정규표현식 삽질 - asterisk(*) vs plus(+)", "url": "/posts/regex_asterisk/", "categories": "Dev, Tips", "tags": "Regex", "date": "2023-08-27 21:40:00 +0900", "snippet": "오랜만의 포스팅. 정신없는 와중에.. 이 글은 나중에 혹시나 어리둥절할 일을 방지하기 위한 메모이다.잘 써오던 로직DB에 정규표현식을 저장하여, 데이터를 수집 후 해당 표현식에 맞는 데이터를 분류해주는 로직이 있었다. 예를 들어 penguin* 으로 저장된 표현식의 목적은, 데이터의 key가 penguin_emperor, penguin_gentoo 와 같은 경우 분류하기 위한 크게 복잡하지 않은 용도였다. 꽤 오랫동안 아무 트러블이 없었다.결국 터진 시한폭탄비록 정규식을 염두에 두고 만들어진 로직이지만, * 이외엔 딱히 쓸일이..." }, { "title": "몽고DB (MongoDB) - value type 변경", "url": "/posts/mongodb_change_type/", "categories": "Dev, Tips", "tags": "MongoDB, Type casting, document", "date": "2023-05-13 21:40:00 +0900", "snippet": "뭐지 이거?몽고DB를 사용하여 운영하는 중 쿼리를 사용해 데이터를 집어넣는 경우가 있었는데, 이후로 type casting 문제로 앱이 잘 안도는 것이었다. 황급히 find 쿼리로 보면 그냥 숫자값인데 왜? 앱에서는 double로 인식하고 있었다.logstash로 수집 데이터를 MongoDB로 넣어준 뒤 그걸 꺼내 확인하는 앱인데 logstash로 넣은 데이터와 직접 수작업 쿼리로 넣은 게 타입이 다른가?라는 의문은 잠시 뒤로하고, 결과가 그러하니 그렇게 이해하는 것으로 넘어가기로 하고 (다음에 알아볼수 있으면 알아봐야지..)..." }, { "title": "카프카 클러스터 (Kafka Cluster) - failover", "url": "/posts/kafka_failover/", "categories": "Dev, Tips", "tags": "Kafka, Cluster, Failover, Topic", "date": "2023-04-26 20:45:00 +0900", "snippet": "뭐야 왜 하나 뻗으니 전부 다 작동안해?카프카를 클러스터로 구성했으니 마땅히 하나가 뻗으면 나머지가 제 역할을 수행해 줄 것이라 굳게 믿고 있었으나 뒤통수를 맞고 말았다.. 하나가 죽었는데 producing, consuming이 모두 뻗어버리고 만 것이다.우선은 리더라는 개념이 있는 모양이다. 알아서 분산하는 줄 알고있었더니 아니었다.. Leader와 Follower가 있고, Leader가 죽을 경우 Follower가 Leader의 역할을 수행하지만 이는 ISR(In Sync Replica) 라는 그룹에 묶여 있을 때의 이야..." }, { "title": "보호 (Protection)", "url": "/posts/os_protection/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, 보호", "date": "2023-03-13 20:45:00 +0900", "snippet": "공룡책(10판) Chapter 17 요약보안은 컴퓨터 자원을 보호하는 것에 중점을, 보호는 프로세스와 사용자의 접근을 제어하는데 중점을 맞춘다.보호의 목표 _ Goals of Protection컴퓨터 시스템의 응용이 더욱 복잡, 광범위해짐으로, 시스템의 무결성을 보호할 필요성이 증가하였다. 신뢰가 없는 사용자도 이용할 수 있는 공동의 논리적 공간, 물리적 공간을 안전하게 공유하기 위해 고안되었다. 결국 접근 제한을 악의적, 의도적으로 위반하는 것을 방지하기 위해, 자원을 정해진 사용 정책대로 사용하도록 보장하기 위함이다. 기법..." }, { "title": "보안 (Security)", "url": "/posts/os_security/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, 보안, 암호화, 인증", "date": "2023-03-12 19:50:00 +0900", "snippet": "공룡책(10판) Chapter 16 요약인프런 강의에 있어 슬슬 마지막 파트..! 보안과 보호이다. 비슷비슷해 보이지만, 보안은 인증(authentication), 보호는 인가(authorization), 권한과 관계된 부분을 다루게 된다.보안 문제 _ Security Problem컴퓨터 자원들이 모든 상황에서 의도된 대로 사용되고 접근된다면 안전하다고 할 수 있다. 보안이란, 실수로 혹은 고의로 자원이 잘못 사용되는 것, 혹은 공격을 감지하여 방어하거나 실수를 제어하는 것이다. cryptography(암호 기법)으로 주로 방..." }, { "title": "대용량 저장장치 구조 (Mass-Storage Structure)", "url": "/posts/os_mass_storate_structure/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, 저장장치", "date": "2023-03-05 17:30:00 +0900", "snippet": "공룡책(10판) Chapter 11 요약HDD, NVM과 같은 대용량 저장장치에 대해 알아보는 단원이다.개관 _ Overview 하드 디스크 디스크 암(헤드), 플래터(트랙:섹터, 실린더(트랙의 집합)) 분당 회전수(RPM)는 전송 속도와 관련이 있다. 탐색 시간(seek time): 디스크 암이 헤드를 움직여 특정 실린더를 찾아가는 시간 회전 지연시간(rotational latency): 원하는 섹터를 찾아가는데 걸리는 회전 시간 비휘발성 메모리 장치 _ Nonvola..." }, { "title": "가상 메모리 (Virtual Memory)", "url": "/posts/os_virtual_memory/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, 메모리, Memory", "date": "2023-02-19 17:30:00 +0900", "snippet": "공룡책(10판) Chapter 10 요약9장의 페이징에서의 스와핑 부분에서 10장의 언급이 있었다. 물리 메모리보다 큰 프로그램을 실행하는 기법 알아보도록 하자배경 _ Background이전에는 실행되고 있는 코드가 반드시 물리 메모리에 존재해야 하였고, 필요에 따라 동적 적재(dynamic loading) 방법을 사용하였다. 동적 적재는 전체 프로세스를 메모리에 올리는 제약을 완화하였지만 프로그래머에게는 여전히 부담이다.메모리에 전체를 올려놓을 필요는 없다, 배열, 리스트, 테이블과 같은 자료구조들이나 거의 실행되지 않는 ..." }, { "title": "메인 메모리 (Main Memory)", "url": "/posts/os_main_memory/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, 메모리, Memory", "date": "2023-02-05 11:35:00 +0900", "snippet": "공룡책(10판) Chapter 9 요약드디어 프로세스 파트를 빠져나왔다.! 어우 길어배경 _ Background메모리는 주소가 있는 바이트의 배열로 구성되어있다. CPU는 프로그램 카운터가 지시하는 대로 메모리로부터 다음 수행할 명령어를 가져와 실행한다.- 기본 하드웨어 _ Basic Hardware메인 메모리 : CPU가 접근할 수 있는 유일한 범용 저장장치기계 명령어들은 메모리 주소만 인수로 취하고 디스크의 주소를 인수로 취하지 않는다. 따라서 실행되는 모든 명령어와 데이터는 CPU가 접근할 수 있는 메인 메모리와 레지스터..." }, { "title": "교착 상태 (Deadlocks)", "url": "/posts/os_deadlock/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, 데드락, Deadlock, 교착상태", "date": "2023-01-15 18:45:00 +0900", "snippet": "공룡책(10판) Chapter 8 요약까다롭다..! 대기 중인 스레드들이 요청한 자원들이 다른 스레드에 의해 점유되어 있고 그 다른 스레드들도 대기 상태에 있어서 상태 변경이 이루어지지 않을 때, 그것을 교착 상태, 데드락이라 한다.시스템 모델 _ System model여러 유형의 자원들이 스레드들에 의해 공유된다. 프로세스는 다음 순서로 자원을 사용한다. Request(요청) - Use(사용) - Release(방출)한 스레드 집합 내의 모든 스레드가 다른 스레드에 의해서만 발생될 수 있는 이벤트를 기다릴 때, 그 스레드 ..." }, { "title": "동기화 예제 (Synchronization Examples)", "url": "/posts/os_synchronization_ex/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, Computer, 컴퓨터, 동기화", "date": "2022-12-25 14:55:00 +0900", "snippet": "공룡책(10판) Chapter 7 요약이전에는 Race condition에 대한 이야기와 해결 도구들을 살펴봤다면, 이번에는 동기화 문제를 직접 살펴보고 적용하는 단원이라고 하는 듯. 무슨 차이지..?고전적인 동기화 문제들동기화 문제에 대한 해결책을 제시할 때 전통적으로 세마포를 많이 이용해 왔다. 여기서도 세마포를 사용할 예정. 단 이진 세마포 대신에 mutex락도 사용 가능하다.- 유한 버퍼 문제 _ The Bouonded-Buffer Problem생산자 - 소비자 문제를 유한 버퍼 문제로, n개의 버퍼가 있을 때 각각의 ..." }, { "title": "동기화 도구들 (Synchronization Tools)", "url": "/posts/os_synchronization_tools/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, Computer, 컴퓨터, 동기화", "date": "2022-11-11 22:55:00 +0900", "snippet": "공룡책(10판) Chapter 6 요약여러 프로세스간의 경쟁 문제를 다루는 챕터..!배경 협력적 프로세스(Cooperating process) 시스템 내에서 서로 영향을 주거나 받는 프로세스 논리적 주소를 공유 혹은은 데이터를 공유한다. 공유 데이터를 동시에 접근하면 데이터의 일관성을 망칠 수 있다. 데이터 무결성 확보 - 동시 데이터 접근 시 실행 순서를 보장해줘야 논리적 주소나 공유 데이터가 유지될 수 있다.생산자 소비자 문제에서 바라보았을때 버퍼를 공유하는 (shared mem..." }, { "title": "CPU 스케줄링 (CPU Scheduling)", "url": "/posts/os_cpu_scheduling/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, Computer, 컴퓨터, CPU, 스케줄링, Scheduling", "date": "2022-10-26 20:55:00 +0900", "snippet": "공룡책(10판) Chapter 5 요약용어들이 넘 많이 나오고 복잡해지고 있어!기본 개념 _ Basic Concepts멀티프로그래밍의 목적은 곧 CPU 이용률을 최대화 하는 것이다. 하나의 프로세스는 I/O 요청이 완료되기를 기다리며 놀 수 있는데, 이런 대기 시간은 낭비이기에 어떻게든 굴려먹어야 한다. 중요한 컴퓨터 자원인 CPU 자원을 프로세스에 할당, 대기, 양도 등 과정에서 CPU 스케줄링은 운영체제 설계의 핵심이라고 할 수 있다.- CPU-I/O 버스트 사이클 _ CPU-I/O Burst Cycle프로세스는 CPU 실..." }, { "title": "스레드와 병행성 (Threads &amp; Concurrency)", "url": "/posts/os_thread/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, Computer, 컴퓨터, Thread, 스레드", "date": "2022-10-15 19:45:00 +0900", "snippet": "공룡책(10판) Chapter 4 요약여태까지의 프로세스는 싱글 스레드. 이제부터 조금씩 복잡해지겠지?개요 _ Overview스레드는 llightweight process로 CPU utilization의 기본 단위 cpu를 점유하는 기본 단위이다. 스레드 ID, 프로그램 카운터(PC), 레지스터 집합과 스택으로 구성된다.전통적인 프로세스는 하나의 제어 스레드를 가지고 있으나, 다수의 제어 스레드를 가질 경우 프로세스는 동시에 여러 작업을 수행할 수 있다.코드, 데이터, 파일 섹션은 공유하며 레지스터, 스택, 프로그램 카운터 정..." }, { "title": "프로세스 (Process)", "url": "/posts/os_process/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, 프로세스, Process, IPC, RPC, Pipe, Socket", "date": "2022-09-23 20:35:00 +0900", "snippet": "공룡책(10판) Chapter 3 요약슬슬 본격 돌입이다!프로세스 개념 _ Process Concept- 프로세스란?모든 CPU 활동들을 어떻게 부를 것인가?초창기 컴퓨터는 작업(job)을 실행하는 일괄처리 시스템이었고 이는 곧 사용자 프로그램 또는 task를 실행하는 시분할 시스템으로 발전하였는데, 실행된 프로그램이나 메모리 관리 등 프로그램 내부 활동 등등 프로세스라 할 수 있겠다. 프로세스 = 실행중인 프로그램프로세스의 활동 상태는 프로그램 카운터 값과 프로세서 레지스터의 내용으로 나타낸다. 메모리 배치는 섹션으로 나뉘..." }, { "title": "OS 구조 (Operating System Structures)", "url": "/posts/os_structures/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, Computer, 컴퓨터", "date": "2022-09-17 11:45:00 +0900", "snippet": "공룡책(10판) Chapter 2 요약좀 더 깊은 맛보기..! 여기 내용은 특히나 깊이 팔 수 있는 부분이 있는 모양이다. 후 챕터에서 자세하게 다룰 내용들이 제법 보인다. 여기서는, 시스템 콜 개념 정도는 알고 넘어가는게 좋을 듯.운영체제 서비스 _ Operating-System Services운영체제는 프로그램 실행 환경을 제공한다. 사용자 인터페이스 (User Interface, UI) : CLI, GUI, 터치스크린 등 프로그램 수행 (Program Execution) : 프로그램을 메모리에 적재하여 실행, 종료 ..." }, { "title": "OS 서론 (Introduction)", "url": "/posts/os_overview/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, Computer, 컴퓨터", "date": "2022-09-16 19:35:00 +0900", "snippet": "공룡책(10판) Chapter 1 요약지난번에 이어 전반적으로 맛을 보는 단계이다. 우선은 가볍게 보자.운영체제가 할 일 _ What Operation Systems do컴퓨터 시스템은 하드웨어, 소프트웨어 및 데이터로 구성되어 있으며, 운영체제는 컴퓨터 시스템이 동작할 때 소프트웨어 간의 하드웨어 사용을 제어하여, 유용한 작업을 할 수 있는 환경을 제공한다.운영체제의 역할을 이해하기 위해 다음과 같은 관점이 있다. User View; 사용자 관점목표는 사용자가 수행하는 작업의 최적화 하는것으로 자원의 이용 효율보다는 사용의..." }, { "title": "OS 스터디를 시작하기 전에..", "url": "/posts/os_intro/", "categories": "CS지식, OS", "tags": "공룡책, OS, Operating System, 운영체제, Computer, 컴퓨터", "date": "2022-09-04 11:45:00 +0900", "snippet": "운영체제가 무엇인지 대략적으로 가지를 뻗어 보자.Computer?대략 이야기해서 컴퓨터라는 하드웨어를 운영하는 소프트웨어라고 할 수 있다. 컴퓨터란 정보를 처리하는 기계라고 할 수 있지. 정보여기서 정보라는 것은 클로드 섀넌(Claude Shannon) 이 정의하기를, 정보량 = 사건이 발생한 확률에 마이너스 로그를 붙인 것이라고.. 이때 이 섀넌의 정보량을 엔트로피라고 하는데, 섀넌이 공식을 만들고보니 열역학적 엔트로피와 같은 형태였다고 하여 그렇게 이름붙였다고 하였지만 결국엔 관계가 있었다더라..! 정보란 곧 불확실성..." }, { "title": "WSL (Windows Subsystem for Linux) 맛보기 (feat. VS Code)", "url": "/posts/wsl/", "categories": "CS지식, OS", "tags": "OS, 운영체제, WSL, WSL2, Windows, Linux, VS Code, Remote WSL", "date": "2022-09-03 20:25:00 +0900", "snippet": "여러가지로 정신없던 가운데 엄청 오랜만의 포스팅.. 너무 방치해두었다ㅠ 그래도 이제 약간 안정을 되찾게 되었어….운영체제 환경 세팅심기일전도 하고, 좀 화면 큰 노트북을 가지고 싶어서 하나 장만했다. 그랬으면 윈도도 깔고 환경을 구성해야겠지.뭔가를 만들고 테스트해볼 운영체제 하면 역시 리눅스다. 새로 세팅하고자 하면 항상 설치해왔던 녀석이 VMware 또는 VirtualBox였다. 회사에서 핫산을 하고 있기에 라이선스를 따져서 GPL인 VirtualBox를 쓰는게 아무래도 안심이 되었지만.. 이거 넘나 번거롭고 불편했다. is..." }, { "title": "아니 왜 사이트 갱신이 안돼? CSS / JS Cache Busting", "url": "/posts/post_20220119/", "categories": "Dev, Tips", "tags": "CSS, JS, Cache, Jekyll, Cache Busting", "date": "2022-01-19 20:45:00 +0900", "snippet": "CSS바꿨는데 왜 적용이 안되지?테마를 적용해 깃허브 블로그로 올리고 이리저리 커스터마이징을 시도해보는데, 로컬에서 jekyll serve로 서버를 실행하였을 때 잘 보이던 갱신사항들이 제대로 적용되지 않은 현상을 자주 관찰하였다. 평소 프론트 작업하듯 개발자도구 열고 “캐시 비우기 및 강력 새로고침” 을 통해서 해결하려 했지만 어째 블로그 페이지 이동때마다 과거 CSS / JS의 망령이 되살아나는 것이다…! 하지만 해답은 가까운 곳에 있었으니,원인은 브라우저 캐시 (Browser Cache)크롬 등의 브라우저를 사용하여 사..." }, { "title": "DevOps, CI/CD? 다 뭔소리래", "url": "/posts/post_20220114/", "categories": "Dev, DevOps", "tags": "DevOps, 데브옵스, Agile, 애자일, CI/CD", "date": "2022-01-14 20:52:00 +0900", "snippet": "데브옵스?개발자로 지내다보면 DevOps라는 개념이 자주 들린다. ‘Development’와 ‘Operations’의 합성어로 개발과 운영을 아울러 전체 소프트웨어 생명주기를 서로 긴밀하게 통합하여 관리.. 한다는 이야기인거 같다.소프트웨어 개발 생명주기 (Software Development Life Cycle, SDLC)시작부터 어떤 용어가 등장하고 말았다..대개 소프트웨어를 개발함에 있어 아래의 단계를 따른다고 한다. 요구사항 분석 → 설계 → 개발 → 테스트 → 운영이러한 과정을 소프트웨어 개발 생명주기라고 하는 모양..." }, { "title": "블로그를 오픈했어요", "url": "/posts/post_20210422/", "categories": "hobby, talk", "tags": "justsay", "date": "2021-04-22 16:29:00 +0900", "snippet": "깃허브로 블로그를 하게 되었습니다.jekyll-theme-chirpy테마를 기반으로 하고, 댓글기능은 utterance를 썼어요.제목 및 소제목 폰트는 메이플스토리-Light, 내용은 나눔고딕 서체를 사용했습니다.앞으로 많은 것을 채워나갔으면 좋겠네요!" } ]
